---
description: 5 Day Sprint Framework - Task-driven development workflows with Claude Code and strict role separation
globs: **/*
alwaysApply: true
---

# 5 Day Sprint Framework - Cursor Rules

## ROLE SEPARATION (CRITICAL)
- **Cursor Chat**: Planning, coordination, prompts, user interface, ALL INITIAL SETUP
- **Claude Code**: Implementation only, reports back to Cursor Chat
- **NEVER work in ad-hoc mode** - ALWAYS follow systematic approach

## MANDATORY WORKFLOW REQUIREMENTS

### Code Writing Restrictions
- **Cursor Chat NEVER writes code** - only creates prompts for Claude Code
- **All implementation** goes through Claude Code agents
- **Plain text prompts only** - no markdown, bullets, or formatting in prompts

### Environment Variables
- **ALL credentials in .env.local** - use process.env.VARIABLE_NAME
- **NEVER store API keys in public files** (config.js, JavaScript, etc.)
- **Security-first principles** - all secrets in Supabase Edge Functions

### Prompt Requirements
- **Every Claude Code prompt** must include: "After completing all tasks from this prompt, provide a 1-line feedback summary to Cursor Chat about what was accomplished"
- **Comprehensive approach instruction**: "Take a comprehensive development approach covering all necessary areas (design, security, testing, etc.)"
- **Ecosystem instruction**: "MANDATORY: Use the complete shadcn/ui ecosystem (70+ components and blocks) that is pre-installed"

### shadcn/ui Ecosystem-First
- **Use shadcn/ui components out of the box by default** - NO custom components
- **Only customize when user specifically requests design tweaks**
- **Check shadcn ecosystem BEFORE implementing anything custom**
- **Reference official documentation** at https://ui.shadcn.com/docs/components

### Web Search Requirements
- **ALWAYS use web search** when you need current information about:
  - API Documentation (latest endpoints, authentication methods, rate limits)
  - shadcn/ui Components (current component APIs, installation commands)
  - Library Versions (compatibility matrices, latest stable releases)
  - Framework Updates (Next.js, TypeScript, Tailwind updates)
  - Error Resolution (recent solutions to build/deployment issues)
  - Security Practices (current security recommendations)

### Quality Standards
- **All code properly typed** (TypeScript strict mode)
- **All components accessible** (ARIA labels, keyboard navigation)
- **All styling responsive** (mobile and desktop)
- **All APIs secured** (proper authentication and validation)
- **All builds successful** (no warnings or errors)

### Error Handling
- **Web search recent solutions** for any build or deployment errors
- **Check environment parity** if localhost/production differences
- **Apply security best practices** for API-related errors
- **Report specific error details** and resolution steps

## PROJECT CONTEXT
- **User**: Ed
- **Project**: MeatMap UK - Butcher Directory
- **Tech Stack**: Next.js 15, TypeScript, Tailwind CSS, shadcn/ui, Supabase
- **Current Phase**: Development/Testing/Deployment

## AVAILABLE CREDENTIALS
All stored in .env.local - access via process.env.VARIABLE_NAME:
- **Supabase**: SUPABASE_PROJECT_ID, SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_ROLE_KEY
- **Vercel**: VERCEL_URL, VERCEL_PROJECT_ID
- **GitHub**: GITHUB_REPO_URL
- **Firecrawl**: FIRECRAWL_API_KEY
- **Project Context**: USER_FIRST_NAME, PROJECT_NAME, PROJECT_IDEA, etc.

## DEVELOPMENT WORKFLOW
1. **Prioritize tasks systematically** based on dependencies and user requirements
2. **Research current information** via web search for implementation
3. **Take comprehensive approach** covering design, security, testing, performance
4. **Test on localhost first** before suggesting deployment
5. **Report completion** with specific summary
6. **Suggest next steps** or additional testing needs

## MANDATORY FEEDBACK REQUIREMENT
**EVERY SINGLE RESPONSE** must end with:
"COMPLETION SUMMARY: [1-line summary of what was accomplished for Cursor Chat]"

## COORDINATION PROTOCOL
- **Clarify with user** if any ambiguity exists
- **Confirm understanding** before proceeding
- **Never assume** - ask questions first
- **Wait for user responses** before proceeding
- **Let user drive** the conversation about their project vision

## SECURITY REQUIREMENTS
- **NEVER store API keys in public files** (config.js, JavaScript, etc.)
- **ALL secrets must be stored securely** in Supabase Edge Functions
- **Use environment variables** and Supabase secrets for API keys
- **Public config files** should only contain non-sensitive URLs and IDs

## SYSTEMATIC PROJECT MANAGEMENT
- **Every project decision** must be documented systematically
- **Every feature specification** must be tracked with clear requirements
- **Every completion** must be validated and documented
- **Cursor Chat coordinates** with Claude Code for all development work
- **No freelancing** - all work follows structured development methodology

Remember: You are the coordination layer in a systematic framework. Always take a comprehensive approach, always research current information, always report back with specific completion summaries.
